I started the lab by using the sort at /usr/local/cs/bin/sort in the linux server. I used the command
> export PATH=/usr/local/cs/bin:$PATH
to set the path to sort and used
> sort --version 
to check that the version of sort is new enough.

The next step to generate a file containing 10,000,000 random floating point numbers. I used the od command to interpret standard input from /dev/urandom as floating 
point numbers and the tr command to put each number on a separate line without any whitespace. Since each floating point number is 8 bytes, I needed to read 80,000,000 
bytes using od. I also used the -An option so that file offset numbers are not outputted.
 
> od -An -tf -N 80000000 < /dev/urandom | tr -s ' ' '\n' > random.txt

Next I timed the sort command when applied to the data and observed how the command is sped up with greater numbers of parallel threads using the --parallel option. 

To time the sort command without the --parallel option, I used the following command:
> time -p sort -g random.txt > /dev/null

real 34.65
user 193.83
sys 0.59

To time the sort command when run with 1 thread using the --parallel option, I used the following command:
> time -p sort -g --parallel=1 random.txt > /dev/null

real 180.31
user 178.84
sys 0.25

To time the sort command when run with 2 threads using the --parallel option, I used the following command:
> time -p sort -g --parallel=2 random.txt > /dev/null

real 93.66
user 178.60
sys 0.33

To time the sort command when run with 4 threads using the --parallel option, I used the following command:
> time -p sort -g --parallel=4 random.txt > /dev/null

real 55.49
user 187.46
sys 0.46

To time the sort command when run with 8 threads using the --parallel option, I used the following command:
> time -p sort -g --parallel=8 random.txt > /dev/null

real 35.12
user 193.47
sys 0.51

When sort is run without the --parallel option, the time turns out to be around the same as when sort is run using 8 threads using the --parallel option. Sort when run with 
1, 2, or 4 threads using the --parallel option is slower than either the general sort or sort with 8 threads. As the number of threads increases, sort runs faster. 
The system time slightly increases with greater number of threads since more system calls are made with more threads. The similarity between the general sort time and 
the 8 thread parallel sort time suggests that the default sort starting with coreutils 8.6 is multithreaded to a limit of 8 threads. Although the linux server has more 
cores, sort appears to not use more than 8 threads. The speedup of the program does 
not scale linearly with increasing number of threads because there is more overhead with more threads and the program is likely not parallelized perfectly.


